import{r as c,R as b}from"./main-Bxfe4Qal.js";import{c as N,q as I,b as t,d as l}from"./queryGraph-B-h_kUel.js";import{u as k}from"./AlertProvider-CS83QDva.js";function i(){return{categories:[],ids:[]}}function h(g,s){return{subject:g||"",object:s||"",predicates:["biolink:related_to"]}}const E={nodes:{n0:i(),n1:i()},edges:{e0:h("n0","n1")}},j={message:{message:{query_graph:E}},rootNode:"n0",isValid:!0,errMessage:""};function x(g,s){const e=N(g);switch(s.type){case"addEdge":{const[r,a]=s.payload,d=t.getNextEdgeID(e.message.message.query_graph);e.message.message.query_graph.edges[d]=h(r,a);break}case"editEdge":{const{edgeId:r,endpoint:a,nodeId:d}=s.payload;if(d)e.message.message.query_graph.edges[r][a]=d;else{const o=t.getNextNodeID(e.message.message.query_graph);e.message.message.query_graph.nodes[o]=i(),e.message.message.query_graph.edges[r][a]=o}e.rootNode=t.getRootNode(e.message.message.query_graph,e.rootNode),e.message.message.query_graph=t.removeDetachedFromRoot(e.message.message.query_graph,e.rootNode);break}case"editPredicate":{const{id:r,predicates:a}=s.payload;e.message.message.query_graph.edges[r].predicates=a;break}case"editQualifiers":{const{id:r,qualifiers:a}=s.payload;if(Object.keys(a).length!==0){const d=Object.entries(a).map(([o,u])=>({qualifier_type_id:`biolink:${l(o)}`,qualifier_value:o==="qualified predicate"?`biolink:${l(u)}`:l(u)}));e.message.message.query_graph.edges[r].qualifier_constraints=[{qualifier_set:d}]}break}case"deleteEdge":{const{id:r}=s.payload;delete e.message.message.query_graph.edges[r],e.rootNode=t.getRootNode(e.message.message.query_graph,e.rootNode),e.message.message.query_graph=t.removeDetachedFromRoot(e.message.message.query_graph,e.rootNode);break}case"addHop":{const{nodeId:r}=s.payload,a=t.getNextNodeID(e.message.message.query_graph),d=t.getNextEdgeID(e.message.message.query_graph);let o=r;if(r===void 0){const u=Object.keys(e.message.message.query_graph.nodes);o=u[u.length-1]}e.message.message.query_graph.edges[d]=h(o,a),e.message.message.query_graph.nodes[a]=i();break}case"addNode":{const r=t.getNextNodeID(e.message.message.query_graph);e.message.message.query_graph.nodes[r]=i();break}case"editNode":{const{id:r,node:a}=s.payload;e.message.message.query_graph.nodes[r]=a||i();break}case"deleteNode":{const{id:r}=s.payload;delete e.message.message.query_graph.nodes[r];const a=t.removeAttachedEdges(e.message.message.query_graph,r);e.rootNode=t.getRootNode(a,e.rootNode),e.message.message.query_graph=t.removeDetachedFromRoot(a,e.rootNode);break}case"saveGraph":{e.message.message.query_graph=I.toCurrentTRAPI(s.payload.message.query_graph),e.rootNode=t.getRootNode(e.message.message.query_graph,null);break}default:return e}const{isValid:y,errMsg:m}=t.isValidGraph(e.message.message.query_graph);return e.isValid=y,e.errMessage=m,e}function w(){const{displayAlert:g}=k(),[s,e]=c.useReducer(x,j);c.useEffect(()=>{!s.isValid&&s.errMessage&&g("error",s.errMessage)},[s.isValid,s.errMessage]);const y=c.useMemo(()=>{if(!s.isValid)return[];const m=[],{message:r,rootNode:a}=s,{query_graph:d}=r.message,o=new Set,u=Object.keys(d.edges),q=u.findIndex(n=>d.edges[n].subject===a);if(q!==-1){const[n]=u.splice(q,1);u.unshift(n)}return u.forEach(n=>{const p=d.edges[n],f={edgeId:n,subjectIsReference:o.has(p.subject??""),objectIsReference:o.has(p.object??"")};o.add(p.subject??""),o.add(p.object??""),m.push(f)}),m},[s]);return{state:s,query_graph:s.message.message.query_graph,textEditorRows:y,dispatch:e}}const _=c.createContext({}),Q=({children:g})=>{const s=w();return b.createElement(_.Provider,{value:s},g)},B=()=>{const g=c.useContext(_);if(!g)throw new Error("useQueryBuilderContext must be used within a QueryBuilderProvider");return g};export{Q,B as u};
